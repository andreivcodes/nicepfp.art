services:
  web:
    build:
      context: .
      dockerfile: apps/web/Dockerfile
      platforms:
        - "linux/amd64"
    ports:
      - "3000"
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-user}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-nicepfp}
      - REDIS_URL=redis://redis:6379
      - NEXT_PUBLIC_HOST=${NEXT_PUBLIC_HOST:-http://localhost:3000}
      - IPFS_PROJECT_ID=${IPFS_PROJECT_ID}
      - IPFS_PROJECT_SECRET=${IPFS_PROJECT_SECRET}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
    networks:
      - nicepfp-network
    restart: unless-stopped

  generate-image:
    build:
      context: .
      dockerfile: apps/generate_image/Dockerfile
      platforms:
        - "linux/amd64"
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-user}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-nicepfp}
      - REDIS_URL=redis://redis:6379
      - PRIVATE_KEY=${PRIVATE_KEY}
      - IPFS_PROJECT_ID=${IPFS_PROJECT_ID}
      - IPFS_PROJECT_SECRET=${IPFS_PROJECT_SECRET}
      - BROWSERLESS_URL=http://browserless:3000
      - BROWSERLESS_TOKEN=${BROWSERLESS_TOKEN}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
      browserless:
        condition: service_healthy
    networks:
      - nicepfp-network
    restart: unless-stopped

  mint:
    build:
      context: .
      dockerfile: apps/mint/Dockerfile
      platforms:
        - "linux/amd64"
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-user}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-nicepfp}
      - REDIS_URL=redis://redis:6379
      - PRIVATE_KEY=${PRIVATE_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
    networks:
      - nicepfp-network
    restart: unless-stopped

  migrate:
    build:
      context: .
      dockerfile: prisma/migrate.Dockerfile
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-user}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-nicepfp}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - nicepfp-network

  redis:
    image: redis:alpine
    volumes:
      - redis-data:/data
    networks:
      - nicepfp-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
      - POSTGRES_DB=${POSTGRES_DB:-nicepfp}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - nicepfp-network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-user} -d ${POSTGRES_DB:-nicepfp}",
        ]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  browserless:
    image: ghcr.io/browserless/chromium:v2.23.0
    environment:
      TOKEN: ${BROWSERLESS_TOKEN}
    restart: unless-stopped
    healthcheck:
      test:
        - CMD
        - curl
        - "-f"
        - "http://127.0.0.1:3000/docs"
      interval: 2s
      timeout: 10s
      retries: 15
    networks:
      - nicepfp-network

networks:
  nicepfp-network:
    driver: bridge

volumes:
  redis-data:
  postgres-data:
